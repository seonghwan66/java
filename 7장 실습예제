--------------------------------------------- 실습예제 1 ---------------------------------------------
abstract class Unit{
    int x;
    int y;
    String str;

    public abstract void move(int x, int y);

    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class Tank extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("탱크의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void sizeMode(){
        System.out.println("공격 모드 : 시즈 모드 변환");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class Marine extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("마린의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void stimPack(){
        System.out.println("공격 모드 : 스팀팩 장전!");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class DropShip extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("드랍쉽의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void load(){
        System.out.println("탑승 모드 : 유닛 탑승!");
    }
    void unload(){
        System.out.println("탑승 모드 : 유닛 하강!");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}

public class UnitEx {
    public static void main(String[] args){
        System.out.println("--------------------------------");

        Tank tank = new Tank();
        tank.move(100, 300);
        tank.sizeMode();
        tank.stop("탱크", 300, 400);

        System.out.println("--------------------------------");

        Marine marine = new Marine();
        marine.move(200, 500);
        marine.stimPack();
        marine.stop("마린", 300, 400);

        System.out.println("--------------------------------");

        DropShip dp = new DropShip();
        dp.move(500, 600);
        dp.load();
        dp.unload();
        dp.stop("드랍쉽", 200, 100);
    }
}
--------------------------------------------- 실습예제 2-1 ---------------------------------------------
interface Predator{
    public String likeFood();
}
abstract class Animal{
    String name;
    public abstract void setName(String name);
}
class Tiger extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "apple";
    }
}
class Lion extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "banana";
    }
}
class Crocodile extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "gogi";
    }
}
public class Zookeeper{
    /*
    public void feed(Tiger tiger) {
        System.out.println("feed apple");
    }
    public void feed(Lion lion) {
        System.out.println("feed banana");
    }
     */
    public void feed(Predator predator){
        System.out.println("feed " + predator.likeFood());
    }
    public static void main(String[] args) {
        Zookeeper zookeeper = new Zookeeper();
        
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        Crocodile croc = new Crocodile();

        zookeeper.feed(tiger);
        zookeeper.feed(lion);
        zookeeper.feed(croc);
    }
}
--------------------------------------------- 실습예제 2-2 ---------------------------------------------
interface Bird{
    void walk();
    void fly();
    void calling();
}
class Eagle implements Bird{
    public void walk(){
        System.out.println("독수리는 걸을 수 있음.");
    }
    public void fly(){
        System.out.println("독수리는 높게 날 수 있음.");
    }
    public void calling(){
        System.out.println("독수리는 울 수 있음.");}
}
class Crow implements Bird{
    public void walk(){
        System.out.println("까마귀는 걸을 수 있음.");
    }
    public void fly(){
        System.out.println("까마귀는 높게 날 수 있음.");
    }
    public void calling(){
        System.out.println("까마귀는 울 수 있음.");}
}
public class Fly {
    public static void main(String[] args){
        Eagle eagle = new Eagle();
        Crow crow = new Crow();

        eagle.walk();
        eagle.fly();
        eagle.calling();
        crow.walk();
        crow.fly();
        crow.calling();
    }
}

---------------------------------------------실습예제1---------------------------------------------

---------------------------------------------실습예제1---------------------------------------------

---------------------------------------------실습예제1---------------------------------------------

---------------------------------------------실습예제1---------------------------------------------

---------------------------------------------실습예제1---------------------------------------------
