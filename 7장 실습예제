--------------------------------------------- 실습예제 1 ---------------------------------------------
abstract class Unit{
    int x;
    int y;
    String str;

    public abstract void move(int x, int y);

    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class Tank extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("탱크의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void sizeMode(){
        System.out.println("공격 모드 : 시즈 모드 변환");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class Marine extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("마린의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void stimPack(){
        System.out.println("공격 모드 : 스팀팩 장전!");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}
class DropShip extends Unit{
    public void move(int x, int y){
        this.x=x;
        this.y=y;
        System.out.println("드랍쉽의 위치 : " + this.x + ", " + this.y + "로 이동함.");
    }
    void load(){
        System.out.println("탑승 모드 : 유닛 탑승!");
    }
    void unload(){
        System.out.println("탑승 모드 : 유닛 하강!");
    }
    public void stop(String str, int x, int y){
        this.x = x;
        this.y = y;
        this.str = str;
        System.out.println("현재 위치 : " + this.x + ", " + this.y + "에 " + this.str + "가/이 멈춥니다.");
    }
}

public class UnitEx {
    public static void main(String[] args){
        System.out.println("--------------------------------");

        Tank tank = new Tank();
        tank.move(100, 300);
        tank.sizeMode();
        tank.stop("탱크", 300, 400);

        System.out.println("--------------------------------");

        Marine marine = new Marine();
        marine.move(200, 500);
        marine.stimPack();
        marine.stop("마린", 300, 400);

        System.out.println("--------------------------------");

        DropShip dp = new DropShip();
        dp.move(500, 600);
        dp.load();
        dp.unload();
        dp.stop("드랍쉽", 200, 100);
    }
}
--------------------------------------------- 실습예제 2-1 ---------------------------------------------
interface Predator{
    public String likeFood();
}
abstract class Animal{
    String name;
    public abstract void setName(String name);
}
class Tiger extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "apple";
    }
}
class Lion extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "banana";
    }
}
class Crocodile extends Animal implements Predator{
    public void setName(String name){
        this.name=name;
    }
    public String likeFood(){
        return "gogi";
    }
}
public class Zookeeper{
    /*
    public void feed(Tiger tiger) {
        System.out.println("feed apple");
    }
    public void feed(Lion lion) {
        System.out.println("feed banana");
    }
     */
    public void feed(Predator predator){
        System.out.println("feed " + predator.likeFood());
    }
    public static void main(String[] args) {
        Zookeeper zookeeper = new Zookeeper();
        
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        Crocodile croc = new Crocodile();

        zookeeper.feed(tiger);
        zookeeper.feed(lion);
        zookeeper.feed(croc);
    }
}
--------------------------------------------- 실습예제 2-2 ---------------------------------------------
interface Bird{
    void walk();
    void fly();
    void calling();
}
class Eagle implements Bird{
    public void walk(){
        System.out.println("독수리는 걸을 수 있음.");
    }
    public void fly(){
        System.out.println("독수리는 높게 날 수 있음.");
    }
    public void calling(){
        System.out.println("독수리는 울 수 있음.");}
}
class Crow implements Bird{
    public void walk(){
        System.out.println("까마귀는 걸을 수 있음.");
    }
    public void fly(){
        System.out.println("까마귀는 높게 날 수 있음.");
    }
    public void calling(){
        System.out.println("까마귀는 울 수 있음.");}
}
public class Fly {
    public static void main(String[] args){
        Eagle eagle = new Eagle();
        Crow crow = new Crow();

        eagle.walk();
        eagle.fly();
        eagle.calling();
        crow.walk();
        crow.fly();
        crow.calling();
    }
}
--------------------------------------------- 실습예제 3 ---------------------------------------------
abstract class Robot{
    public abstract String getName();
}
abstract class RobotFactory{
    abstract Robot createRobot(String name);
}
class SuperRobot extends Robot{
    public String getName(){
        return "SuperRobot";
    }
}
class PowerRobot extends Robot{
    public String getName(){
        return "PowerRobot";
    }
}
class SuperRobotFactory extends RobotFactory{
    public Robot createRobot(String name){
        if(name==null){
            return null;
        }
        if(name.equalsIgnoreCase("SuperRobot")) {
            return new SuperRobot();
        } else if (name.equalsIgnoreCase("PowerRobot")){
            return new PowerRobot();
        }
        return null;
    }
}
public class FactoryMain {
    public static void main(String[] args){
        SuperRobotFactory superrobotfactory = new SuperRobotFactory();
        Robot roro = superrobotfactory.createRobot("SuperRobot");
        System.out.println(roro.getName());
        Robot bobo = superrobotfactory.createRobot("PowerRobot");
        System.out.println(bobo.getName());
    }
}
--------------------------------------------- 실습예제 4 ---------------------------------------------
class Animalmal{
    public void cry(){
        System.out.println("짖기!");
    }
}
class Cat extends Animalmal{
    public void cry(){
        System.out.println("냐옹냐옹!");
    }
}
class Dog extends Animalmal{
    public void cry(){
        System.out.println("멍멍!");
    }
}
class MyPet extends Animalmal{} //class MyPet extends Cat, Dog {}
public class Polymorphism {
    public static void main(String[] args){
        MyPet p = new MyPet();
        p.cry();
    }
}
--------------------------------------------- 실습예제 5 ---------------------------------------------
import java.util.Scanner;
public class CallerExample {
    public static void main(String[] args){
        Callee callee = new Callee();

        callee.setCallBack(new Callee.CallBack() {
            @Override
            public void onInputOne(Callee callee) {
                System.out.println("Caller : Input from Callee " + callee.getNum());
                System.out.println("callee's num : " + callee.getNum());
            }
            @Override
            public void onInputTwo(Callee callee) {
                System.out.println("Caller : Input from Callee " + + callee.getNum());
                System.out.println("callee's num : " + callee.getNum());
            }
        });
        callee.execute();
    }
}
class Callee{
    public interface CallBack{
        public void onInputOne(Callee callee);
        public void onInputTwo(Callee callee);
    }
    private Integer num;
    private CallBack callback;
    public Callee(){
        this.num = 0;
        this.callback = null;
    }
    public void setCallBack(CallBack callback){
        this.callback = callback;
    }
    public Integer getNum(){
        return this.num;
    }
    public void execute() {
        Scanner sc = new Scanner(System.in);

        System.out.println("1과 2 중 하나를 입력하세요.");
        num = sc.nextInt();

        if (callback != null) {
            if (num == 1) {
                callback.onInputOne(this);
            } else if (num == 2) {
                callback.onInputTwo(this);
            } else if (num != 1 & num != 2){
                execute();
            }
        }
        /*
        if(callback != null){
            switch(num){
            case 1:
                callback.onInputOne(this);
                break;
            case 2:
                callback.onInputTwo(this);
                break;
            }
        } */
    }
}
--------------------------------------------- 10장 실습예제1 ---------------------------------------------
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.JButton;

// MyFrame 클래스 정의 (JFrame을 상속받는 사용자 정의 프레임)
public class MyFrame extends JFrame {

    private JPanel contentPane; // 프레임의 컨텐츠 영역을 담을 패널
    private JTextField textField; // 체중을 입력받을 텍스트 필드
    private JTextField textField_1; // 키를 입력받을 텍스트 필드
    private JLabel lbResult; // BMI 결과를 표시할 레이블

    // main 메서드
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MyFrame frame = new MyFrame(); // MyFrame 객체 생성
                    frame.setVisible(true); // 프레임을 화면에 표시
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // MyFrame 생성자
    public MyFrame() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // 닫기 버튼 동작 설정
        setBounds(100, 100, 450, 300); // 프레임 크기 및 위치 설정
        contentPane = new JPanel(); // 새로운 패널 생성
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); // 패널의 여백 설정
        setContentPane(contentPane); // 프레임에 패널 설정
        contentPane.setLayout(null); // 배치 관리자를 사용하지 않도록 설정

        // 첫 번째 레이블 설정
        JLabel lblNewLabel = new JLabel("나의 BMI ?");
        lblNewLabel.setBounds(27, 24, 258, 21);
        contentPane.add(lblNewLabel);

        // 두 번째 레이블 설정
        JLabel lblNewLabel_1 = new JLabel("나의 체중(kg): ");
        lblNewLabel_1.setBounds(27, 61, 104, 15);
        contentPane.add(lblNewLabel_1);

        // 세 번째 레이블 설정
        JLabel lblNewLabel_2 = new JLabel("나의 키(m):");
        lblNewLabel_2.setBounds(27, 86, 104, 18);
        contentPane.add(lblNewLabel_2);

        // 체중을 입력받을 텍스트 필드 설정
        textField = new JTextField();
        textField.setBounds(143, 55, 116, 21);
        contentPane.add(textField);
        textField.setColumns(10);

        // 키를 입력받을 텍스트 필드 설정
        textField_1 = new JTextField();
        textField_1.setBounds(143, 83, 116, 21);
        contentPane.add(textField_1);
        textField_1.setColumns(10);

        // BMI 결과를 표시할 레이블 설정
        lbResult = new JLabel("당신의 BMI: ");
        lbResult.setBounds(27, 160, 200, 21);
        contentPane.add(lbResult);

        // BMI 확인하기 버튼 설정
        JButton btnNewButton = new JButton("BMI 확인하기");
        btnNewButton.setBounds(27, 120, 140, 23);
        contentPane.add(btnNewButton);

        // 버튼 클릭 시 이벤트 처리
        btnNewButton.addActionListener(e -> {
            double weight = Double.parseDouble(textField.getText()); // 체중을 입력받아 double로 변환
            double height = Double.parseDouble(textField_1.getText()); // 키를 입력받아 double로 변환
            double bmi = weight / Math.pow(height, 2); // BMI 계산
            lbResult.setText("BMI : " + bmi); // 결과를 레이블에 표시
        });
    }
}


--------------------------------------------- 10장 실습예제4 ---------------------------------------------
//10장 실습 3
package slotmachine;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

// 슬롯머신 게임을 구현한 MyCounter 클래스 정의
class MyCounter extends JFrame implements ActionListener {
    private JLabel[] labels;   // 레이블 배열
    private JButton button;     // 버튼 객체
    private int[] numbers;      // 숫자 배열

    // MyCounter 클래스의 생성자
    public MyCounter() {
        setSize(500, 300);     // 프레임 크기 설정
        JPanel panel = new JPanel();   // 패널 생성
        panel.setLayout(null);        // 배치 관리자 설정

        labels = new JLabel[3];      // 3개의 레이블 생성
        numbers = new int[3];        // 3개의 숫자 배열 생성

        // 각 레이블 초기화 및 패널에 추가
        for (int i = 0; i < 3; i++) {
            labels[i] = new JLabel("" + numbers[i]); // 초기값은 0
            labels[i].setFont(new Font("Serif", Font.BOLD | Font.ITALIC, 100)); // 폰트 설정
            labels[i].setSize(100, 100);    // 크기 설정
            labels[i].setLocation(100 + 100 * i, 20);  // 위치 설정
            panel.add(labels[i]);    // 패널에 레이블 추가
        }

        button = new JButton("스핀");   // "스핀"이 적힌 버튼 생성
        button.setSize(300, 30);        // 크기 설정
        button.setLocation(100, 120);   // 위치 설정
        panel.add(button);              // 패널에 버튼 추가
        button.addActionListener(this); // 버튼에 ActionListener 등록

        add(panel);          // 프레임에 패널 추가
        setTitle("My Game"); // 프레임 제목 설정
        setVisible(true);    // 프레임을 화면에 표시
    }

    // ActionListener의 메서드를 구현한 actionPerformed 메서드
    @Override
    public void actionPerformed(ActionEvent event) {
        // "스핀" 버튼이 클릭되었을 때 호출되는 메서드
        for (int i = 0; i < 3; i++) {
            numbers[i] = (int) (Math.random() * 10); // 0부터 9까지의 난수 생성
            labels[i].setText("" + numbers[i]);      // 레이블에 숫자 표시
        }
    }
}

// 메인 클래스
public class SlotMachine {
    public static void main(String[] args) {
        new MyCounter(); // MyCounter 객체 생성하여 슬롯머신 게임 시작
    }
}

--------------------------------------------- 16장 실습예제1 ---------------------------------------------
import java.util.Random;

class MyRunnable implements Runnable {

    private static final Random random = new Random();

    @Override
    public void run() {
        String threadName = Thread.currentThread().getName();
        System.out.println("- " + threadName + " has been started");
        int delay = 1000 + random.nextInt(4000); //0~4000
        try {
            Thread.sleep(delay);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("- " + threadName + " has been ended (" + delay + "ms)");
    }
}
public class ThreadRunner {
    public static void main(String[] args) {
        // 스레드 객체 생성
        Thread thread1 = new Thread(new MyRunnable());
        thread1.setName("Thread #1");
        Thread thread2 = new Thread(new MyRunnable());
        thread2.setName("Thread #2");

        // 런에이블 객체 생성
        Runnable runnable1 = new MyRunnable();
        Runnable runnable2 = new MyRunnable();

        Thread thread3 = new Thread(runnable1);
        thread3.setName("Thread #3");
        Thread thread4 = new Thread(runnable2);
        thread4.setName("Thread #4");

        // 모든 스레드 시작
        thread1.start();
        thread2.start();
        thread3.start();
        thread4.start();
    }
}
--------------------------------------------- 16장 실습예제2 ---------------------------------------------
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
class NumberThread extends Thread {
    private int number;
    public NumberThread() {
        // 생성자에서 랜덤 숫자 생성
        this.number = (int) (Math.random() * 10);
    }
    public int getNumber() {
        return number;
    }
    @Override
    public void run() {
        // 스레드 실행 시의 동작
        Thread.State state = this.getState();
        String threadName = Thread.currentThread().getName();
        System.out.println("Thread Name: " + threadName + ", State: " + state + ", Number: " + number);
    }
}
class ButtonCount extends JFrame implements ActionListener {
    private JLabel[] labels; // 레이블 배열
    private JButton button; // 버튼 객체
    private NumberThread thread; // 스레드 객체
    private int[] numbers; // 숫자 배열

    public ButtonCount() {
        setSize(500, 300); // 프레임 크기 설정
        JPanel panel = new JPanel(); // 패널 생성
        panel.setLayout(null); // 배치 관리자 설정

        labels = new JLabel[3]; // 3개의 레이블 생성
        numbers = new int[3]; // 3개의 숫자 배열 생성

        // 각 레이블 초기화 및 패널에 추가
        for (int i = 0; i < 3; i++) {
            labels[i] = new JLabel("" + numbers[i]); // 초기값은 0
            labels[i].setFont(new Font("Serif", Font.BOLD | Font.ITALIC, 100)); // 폰트 설정
            labels[i].setSize(100, 100); // 크기 설정
            labels[i].setLocation(100 + 100 * i, 20); // 위치 설정
            panel.add(labels[i]); // 패널에 레이블 추가
        }
        button = new JButton("스레드 생성"); // "스레드 생성"이 적힌 버튼 생성
        button.setSize(300, 30); // 크기 설정
        button.setLocation(100, 120); // 위치 설정
        panel.add(button); // 패널에 버튼 추가
        button.addActionListener(this); // 버튼에 ActionListener 등록

        add(panel); // 프레임에 패널 추가
        setTitle("카운트 다운"); // 프레임 제목 설정
        setVisible(true); // 프레임을 화면에 표시
    }
    @Override
    public void actionPerformed(ActionEvent event) {
        // "스레드 생성" 버튼이 클릭되었을 때 호출되는 메서드
        thread = new NumberThread(); // 새로운 스레드 생성
        thread.start(); // 스레드 시작

        // 첫 번째 숫자를 랜덤으로 설정
        numbers[0] = (int) (Math.random() * 10);
        labels[0].setText("" + numbers[0]);

        // 두 번째 숫자는 생성된 스레드의 숫자를 반환
        numbers[1] = thread.getNumber();
        labels[1].setText("" + numbers[1]);

        // 세 번째 숫자를 랜덤으로 설정
        numbers[2] = (int) (Math.random() * 10);
        labels[2].setText("" + numbers[2]);
    }
}
public class ButtonCountDown {
    public static void main(String[] args) {
        new ButtonCount(); // ButtonCount 객체 생성하여 카운트 다운 시작
    }
}
--------------------------------------------- 16장 실습예제4 ---------------------------------------------
class CreateThread implements Runnable {
    Money myMoney = new Money();
    public void run(){
        while(myMoney.getMyMoney() > 0){
            int money = (int)(Math.random()*5 + 1)*1000;
            boolean denied =!myMoney.withdraw(money);
            if(denied){
                System.out.println("출금 거부");
            }else{
                System.out.println("스레드: %s 출금 %d원 남은 금액: %d원\n", Thread.currentThread().getName(),money,myMoney.getMyMoney());
            }
        }
    }
}
class Money{
    private int myMoney = 10000;
    public int getMyMoney(){
        return myMoney;
    }
    public boolean withdraw(int money){
        if(myMoney >= money){
            try{
                Thread.sleep(1000);
            }catch(Exception e){
                System.out.println(e);
            }
            myMoney-=money;
            return true;
        }
        return false;
    }
}
public class ThreadSyncEx {
    public static void main(String[] args){
        Runnable thread = new CreateThread();

        Thread thread1 = new Thread(thread);
        Thread thread2 = new Thread(thread);

        thread1.setName("스레드1");
        thread2.setName("스레드2");

        thread1.start();
        thread2.start();
    }
}
