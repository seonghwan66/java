import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
public class synonym_chain {
    public static void main(String[] args) {
        LinkedList[] hash_file = new LinkedList[16];
        for (int i = 0; i < 16; i++) {
            hash_file[i] = new LinkedList();
        }
        try (BufferedReader br = new BufferedReader(new FileReader("hash_cmd.txt"));
             BufferedWriter bw = new BufferedWriter(new FileWriter("result.txt"))
        ) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] command = line.split(" ");
                if (command[0].equals("i")) {
                    int key = Integer.parseInt(command[1]);
                    int totalSize = 0;
                    int overflowSize = 0;
                    for (int i = 0; i < 16; i++) {
                        totalSize += hash_file[i].size;
                    }
                    for(int i = 0; i < 16; i++){
                        LinkedList.Node current = hash_file[i].head;
                        while( current != null ){
                            if(current != hash_file[i].head){
                                overflowSize++;
                            }
                            current = current.next;
                        }
                    }
                    if (totalSize != 32) { // 31까지 동작.
                        if( hash_file[key % 16].head == null ){ // 일반 구역.
                            hash_file[key % 16].insertKey(key);
                        } else if( overflowSize != 16 ){ // 오보플로우 구역 15까지 동작.
                            hash_file[key % 16].insertKey(key);
                        }
                    }
                } else if (command[0].equals("r")) {
                    int key = Integer.parseInt(command[1]);
                    hash_file[key % 16].removeKey(key);
                }
            }
            for (int i = 0; i < 16; i++) {
                bw.write(i + ":");
                bw.write(hash_file[i].toString());
                bw.write("\n");
            }
        }catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class LinkedList {
    public Node head;
    public Node tail;
    public int size = 0;

    public class Node {
        public Object data;
        public Node next;

        public Node(Object input) {
            this.data = input;
            this.next = null;
        }
    }
    public void insertKey(int key) {
        Node current = head;
        while (current != null) {
            if (current.data.equals(key)) {
                return;
            }
            current = current.next;
        }
        if (head == null) {
            head = new Node(key);
            size++;
            if (head.next == null) {
                tail = head;
            }
        } else {
            Node newNode = new Node(key);
            tail.next = newNode;
            tail = newNode;
            size++;
        }
    }
    public String toString() {
        StringBuilder str = new StringBuilder();
        if (head == null) {
            return "-1,";
        }
        Node current = head;
        for (int i = 0; i < size; i++) {
            str.append(current.data).append(",");
            current = current.next;
        }
        return str + "";
    }

    public void removeKey(int key) {
        Node current = head;
        Node prev = null;
        while (current != null && current.data.equals(key)) {
            head = current.next;
            current = head;
            size--;
        }
        while (current != null) {
            while (current != null && !current.data.equals(key)) {
                prev = current;
                current = current.next;
            }
            if (current != null) {
                prev.next = current.next;
                size--;

                if (current == tail) {
                    tail = prev;
                }
                current = prev.next;
            }
        }
    }
}
