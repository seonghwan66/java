interface RemoteControl{
    void turnOn();
    void turnOff();
    public default void printBrand(){System.out.println("Remote Control 가능 TV");}
}
class Television implements RemoteControl{
    boolean on;
    public void turnOn(){
        on = true;
        System.out.println("tv 켜짐");
    }
    public void turnOff(){
        on = false;
        System.out.println("tv 꺼짐");
    }
    public void printBrand(){
        System.out.println("Power Java TV입니다.");
    }
}
public class TestInterface {
    public static void main(String args[]){
        RemoteControl obj = new Television();
        obj.turnOn();
        obj.turnOff();
        obj.printBrand();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
interface Drawable{
    void draw();
    public default void getSize(){
        System.out.println("10203X748");
    }
}
class CircleDraw implements Drawable{
    int radius;
    public void draw(){System.out.println("Circle Draw");}
    public void getSize(){System.out.println("30555X492");}
}
public class TestClass{
    public static void main(String[] args){
        Drawable d = new CircleDraw();
        d.draw();
        d.getSize();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
interface FactoryShape{
    void draw();
}
class FactoryCircle implements FactoryShape{
    public void draw(){
        System.out.println("Cicle - draw() method");
    }
}
class FactoryRectangle implements FactoryShape{
    public void draw(){
        System.out.println("Rectangle - draw() method");
    }
}
class FactorySquare implements FactoryShape{
    public void draw(){
        System.out.println("Square - draw() method");
    }
}
class ShapeFactory{
    public FactoryShape getShape(String shapeType){
        if(shapeType == null){
            return null;
        }
        if(shapeType.equalsIgnoreCase("CIRCLE")){
            return new FactoryCircle();
        } else if (shapeType.equalsIgnoreCase("RECTANGLE")){
            return new FactoryRectangle();
        } else if (shapeType.equalsIgnoreCase("SQUARE")){
            return new FactorySquare();
        }
        return null;
    }
}
public class FactoryPatternTest {
    public static void main(String[] args){
        ShapeFactory shapeFactory = new ShapeFactory();
        FactoryShape shape1 = shapeFactory.getShape("CIRCLE");
        shape1.draw();
        FactoryShape shape2 = shapeFactory.getShape("RECTANGLE");
        shape2.draw();
        FactoryShape shape3 = shapeFactory.getShape("SQUARE");
        shape3.draw();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

class MyClass implements ActionListener{
    public void actionPerformed(ActionEvent event){
        System.out.println("beep");
    }
}
public class CallbackTest {
    public static void main(String[] args){

        ActionListener listener = new MyClass();
        Timer t = new Timer(1000, listener);
        t.start();
        for(int i = 0; i < 1000; i++){
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {}
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class LocalInnerTest {
    public static void main(String[] args){
        LocalInner obj = new LocalInner();
        obj.display();
    }
}
class LocalInner{
    private int data = 30;

    void display(){
        final String msg = "현재의 데이터 값은 ";

        class Local{
            void printMsg(){
                System.out.println(msg + data);
            }
        }
        Local obj = new Local();
        obj.printMsg();
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
