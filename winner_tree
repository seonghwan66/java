import java.io.*;
import java.util.*;
public class winner_tree {
    public static void main(String[] args) {
        int[] winner = new int[15];
        Arrays.fill(winner, 0); // winner 배열의 모든 요소를 0으로 초기화
        try {
            BufferedWriter ofs = new BufferedWriter(new FileWriter("merged_out.txt"));
            // FileWirter 파일에 문자를 쓰기 위한 스트림을 열어줌. merged_out.txt에 쓸 내용을 저장할 수 있도록 연결
            // BufferedWriter : FileWriter로 열린 파일에 대한 출력 버퍼링
            List<List<Integer>> v = new ArrayList<>(); // 입력 데이터를 저장할 2차원 리스트 생성

            for (int i = 0; i < 8; i++) {
                List<Integer> input = new ArrayList<>();
                String name = "input_" + i + ".txt";
                InputStream inputStream = winner_tree.class.getResourceAsStream(name);
                // InputStream과 getResourceAsStream 메서드를 활용하여 input_i.txt 파일의 데이터를 읽어옴. inputStream에 넣음.
                BufferedReader ifs = new BufferedReader(new InputStreamReader(inputStream));
                // InputStream으로부터 읽어온 데이터를 문자 스트림으로 변환하고, 이를 버퍼링하여 한 줄씩 읽게 함.

                String line;
                while ((line = ifs.readLine()) != null) { // BufferedReader를 사용하여 파일에서 한 줄을 읽어와 line 문자열에 저장
                    int number = Integer.parseInt(line); // 문자열을 정수로 변환
                    input.add(number); // 정수 num을 input 리스트에 추가
                }
                ifs.close();
                v.add(input); // input을 v 리스트에 추가
            }

            for (int i = 0; i < 8; i++) {
                winner[i + 7] = v.get(i).get(0);
                v.get(i).remove(0);
            }

            for (int i = 0; i < 10; i++) {
                int[] route = new int[4]; // 경로 저장하는 배열 선언
                win(7, 15, winner);
                win(3, 7, winner);
                win(1, 3, winner);

                int x = 0; // 승자를 찾기 시작하는 위치
                int y = 1; // y에 현재 경로 위치
                while (y < 4) {
                    x = find(x, winner); // x에서 시작해서 winner 배열에서 승자의 위치 찾음
                    route[y] = x; // route 배열의 현재 경로 위치 y에 x 값 저장
                    y++;
                }

                Arrays.sort(route); // 경로 배열 route 정렬
                ofs.write(winner[0] + "\n"); // winner 배열의 첫 번째 원소 출력 파일에 씀. merged_out.txt에 최종 승자 적음.
                for (int j = 3; j >= 0; j--) {
                    ofs.write(route[j] + " ");
                } // route에 있는 경로 정보를 merged_out.txt에 씀.
                ofs.write("\n");
                winner[route[3]] = v.get(route[3] - 7).get(0);
                // route[3]-승자의 위치, v 리스트에서 해당 위치에 있는 하위 리스트 (v.get(route[3] - 7))를 가져와서 첫 번째 원소 (get(0))를 얻어옵니다.
                // 이렇게 얻은 값을 winner 배열의 해당 위치에 할당함으로써, 승자의 위치를 업데이트
                v.get(route[3] - 7).remove(0); // v 리스트에서 승자의 위치에 있는 하위 리스트에서 첫 번째 원소 제거
            } ofs.close();
        } catch (IOException e) {
            e.printStackTrace(); // 디버깅 및 오류 추적
        } // 예외 처리
    }
    static void win(int key1, int key2, int[] winner) {
        for (int i = key1; i < key2; i += 2) { // 2씩 증가 -> 2개 값을 비교
            if (winner[i] <= winner[i + 1]) { winner[i / 2] = winner[i]; } // winner[i]와 winner[i+1]을 비교해 더 작은 값을
            else { winner[i / 2] = winner[i + 1]; } // winner[i/2]에 넣음.
        }
    }
    static int find(int key, int[] winner) {
        if (winner[key] == winner[key * 2 + 1]) { return key * 2 + 1; } // key 이길 경우
        else { return key * 2 + 2; } // key 질 경우
    }
}
